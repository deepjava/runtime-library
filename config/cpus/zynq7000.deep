#deep-1

meta {
	version = "2017-11-15";
	description = "CPU description file for Zynq-7000 SOC";
}

cpu zynq7010 {
	description = "Zynq-7010";
	cpuarch = arm32;
	
	sysconst {
		OCM_BaseAddr = 0;								# On-chip memory base address
		OCM_Size = 0x40000;								# On-chip memory size (256k)
#		OCM_Size = 0xc000;								# for test only
		
		excpCodeBase = OCM_BaseAddr;					# Base address for exception code
		excpCodeSize = 0x1000;							# Exception code size
		
		sysTabBaseAddr = excpCodeBase + excpCodeSize;	# Place system table behind exception code
		
		stackSizeSVC = 0x1000;							# stack size for SVC mode
		stackSizeIRQ = 0x1000;							# stack size for IRQ mode
		heapSize = 0x8000;								# Default heap size

		ioReg = 0xe0000000;								# I/O peripheral registers
		uartController = ioReg + 0;						# UART controller
		gpioController = ioReg + 0xa000;				# GPIO controller
		slcrReg = 0xf8000000;							# System level control registers
		cpuPrivateReg = 0xf8900000;						# CPU private registers
		interruptCtlr = cpuPrivateReg + 0x600100;		# Interrupt controller registers
		globalTimer = cpuPrivateReg + 0x600200;			# Global Timer
		interruptCtlrDistr = cpuPrivateReg + 0x601000;	# Interrupt controller distributor registers
	}
	
	memorymap {

		# ===== Internal RAM =====
		device InternalRam {
			attributes = read, write;
			width = 4; # byte
			size = OCM_BaseAddr + OCM_Size;
			base = OCM_BaseAddr;
			technology = ram;
		}
		
		segment InternalRam.ExceptionCode {
			base = OCM_BaseAddr;
			size = excpCodeSize;
		}

		segment InternalRam.SysTab {
			base = sysTabBaseAddr;
			attributes = read, write, systab;
		}

		segment InternalRam.Default {								# Default Segment for code, constants and class fields
#			base = sysTabBaseAddr + sysTabSize;
			attributes = read, write, const, code, var;
		}

		segment InternalRam.Heap {
			base = OCM_BaseAddr + OCM_Size - stackSizeSVC - stackSizeIRQ - heapSize;
			size = heapSize;
			attributes = read, write, heap;
		}
		
		segment InternalRam.StackSVC {
			base = OCM_BaseAddr + OCM_Size - stackSizeSVC ;
			size = stackSizeSVC;
			attributes = read, write, stack;
		}
		
		segment InternalRam.StackIRQ {
			base = OCM_BaseAddr + OCM_Size - stackSizeSVC - stackSizeIRQ ;
			size = stackSizeIRQ;
			attributes = read, write, stack;
		}
	}

	registermap {
			
		# I/O peripheral registers

		 register GPIO_DATA0 {
			 type = IOR;
			 addr = gpioController + 0x40;
			 size = 4;
		}
		 register GPIO_DIR0 {
			 type = IOR;
			 addr = gpioController + 0x204;
			 size = 4;
		}

		# ARM MP core registers
		
		register GTCR_L {
			 type = IOR;
			 addr = globalTimer;
			 size = 4;
		}
		register GTCR_U {
			 type = IOR;
			 addr = globalTimer + 4;
			 size = 4;
		}
		register GTCR {
			 type = IOR;
			 addr = globalTimer + 8;
			 size = 4;
		}
		
		# System level control registers
		
		register SLCR_LOCK {
			 type = IOR;
			 addr = slcrReg + 4;
			 size = 4;
		}
		
		register SLCR_UNLOCK {
			 type = IOR;
			 addr = slcrReg + 8;
			 size = 4;
		}
		
		register SLCR_LOCKSTA {
			 type = IOR;
			 addr = slcrReg + 0xc;
			 size = 4;
		}
		
		register SLCR_UART_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x154;
			 size = 4;
		}
		
		register SLCR_MIO_PIN_00 {
			 type = IOR;
			 addr = slcrReg + 0x700;
			 size = 4;
		}
		
		register SLCR_MIO_PIN_07 {
			 type = IOR;
			 addr = slcrReg + 0x71c;
			 size = 4;
		}
		
		register SLCR_MIO_PIN_10 {
			 type = IOR;
			 addr = slcrReg + 0x728;
			 size = 4;
		}
		
		register SLCR_MIO_PIN_11 {
			 type = IOR;
			 addr = slcrReg + 0x72c;
			 size = 4;
		}
		
		register SLCR_MIO_PIN_48 {
			 type = IOR;
			 addr = slcrReg + 0x7c0;
			 size = 4;
		}
		
		register SLCR_MIO_PIN_49 {
			 type = IOR;
			 addr = slcrReg + 0x7c4;
			 size = 4;
		}
		
		register SLCR_OCM_CFG {
			 type = IOR;
			 addr = slcrReg + 0x910;
			 size = 4;
		}
		
		# Interrupt controller registers
		
		register ICCICR {
			 type = IOR;
			 addr = interruptCtlr + 0x00;
			 size = 4;
		}

		register ICCPMR {
			 type = IOR;
			 addr = interruptCtlr + 0x04;
			 size = 4;
		}

		register ICCBPR {
			 type = IOR;
			 addr = interruptCtlr + 0x08;
			 size = 4;
		}

		register ICCIAR {
			 type = IOR;
			 addr = interruptCtlr + 0x0c;
			 size = 4;
		}

		register ICCEOIR {
			 type = IOR;
			 addr = interruptCtlr + 0x10;
			 size = 4;
		}

		register ICCIDR {
			 type = IOR;
			 addr = interruptCtlr + 0xfc;
			 size = 4;
		}

		# Interrupt controller registers
		
		register ICDDCR {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x00;
			 size = 4;
		}

		register ICDICTR {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x04;
			 size = 4;
		}

		register ICDISER0 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x100;
			 size = 4;
		}

		register ICDISER1 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x104;
			 size = 4;
		}

		register ICDISER2 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x108;
			 size = 4;
		}

		register ICDIPTR0 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x800;
			 size = 4;
		}

		register ICDIPTR1 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x804;
			 size = 4;
		}

		register ICDIPTR2 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x808;
			 size = 4;
		}

		register ICDIPTR20 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x850;
			 size = 4;
		}

		# UART0 registers
		
		register UART0_CR {
			 type = IOR;
			 addr = uartController + 0x00;
			 size = 4;
		}
		
		register UART0_MR {
			 type = IOR;
			 addr = uartController + 0x04;
			 size = 4;
		}
		
		register UART0_IER {
			 type = IOR;
			 addr = uartController + 0x08;
			 size = 4;
		}
		
		register UART0_IDR {
			 type = IOR;
			 addr = uartController + 0x0c;
			 size = 4;
		}
		
		register UART0_IMR {
			 type = IOR;
			 addr = uartController + 0x10;
			 size = 4;
		}
		
		register UART0_ISR {
			 type = IOR;
			 addr = uartController + 0x14;
			 size = 4;
		}
		
		register UART0_BAUDGEN {
			 type = IOR;
			 addr = uartController + 0x18;
			 size = 4;
		}
		
		register UART0_RXTOUT {
			 type = IOR;
			 addr = uartController + 0x1c;
			 size = 4;
		}
		
		register UART0_RX_FIFO_LEVEL {
			 type = IOR;
			 addr = uartController + 0x20;
			 size = 4;
		}
		
		register UART0_MODEMCR {
			 type = IOR;
			 addr = uartController + 0x24;
			 size = 4;
		}
		
		register UART0_MODEMSR {
			 type = IOR;
			 addr = uartController + 0x28;
			 size = 4;
		}
		
		register UART0_SR {
			 type = IOR;
			 addr = uartController + 0x2c;
			 size = 4;
		}
		
		register UART0_FIFO {
			 type = IOR;
			 addr = uartController + 0x30;
			 size = 4;
		}
		
		register UART0_BAUDDIV {
			 type = IOR;
			 addr = uartController + 0x34;
			 size = 4;
		}
		
		register UART0_FLOWDELAY {
			 type = IOR;
			 addr = uartController + 0x38;
			 size = 4;
		}
		
		register UART0_TX_FIFO_Level {
			 type = IOR;
			 addr = uartController + 0x44;
			 size = 4;
		}
		
		# UART1 registers
		
		register UART1_CR {
			 type = IOR;
			 addr = uartController + 0x1000;
			 size = 4;
		}
		
		register UART1_MR {
			 type = IOR;
			 addr = uartController + 0x1004;
			 size = 4;
		}
		
		register UART1_IER {
			 type = IOR;
			 addr = uartController + 0x1008;
			 size = 4;
		}
		
		register UART1_IDR {
			 type = IOR;
			 addr = uartController + 0x100c;
			 size = 4;
		}
		
		register UART1_IMR {
			 type = IOR;
			 addr = uartController + 0x1010;
			 size = 4;
		}
		
		register UART1_ISR {
			 type = IOR;
			 addr = uartController + 0x1014;
			 size = 4;
		}
		
		register UART1_BAUDGEN {
			 type = IOR;
			 addr = uartController + 0x1018;
			 size = 4;
		}
		
		register UART1_RXTOUT {
			 type = IOR;
			 addr = uartController + 0x101c;
			 size = 4;
		}
		
		register UART1_RX_FIFO_LEVEL {
			 type = IOR;
			 addr = uartController + 0x1020;
			 size = 4;
		}
		
		register UART1_MODEMCR {
			 type = IOR;
			 addr = uartController + 0x1024;
			 size = 4;
		}
		
		register UART1_MODEMSR {
			 type = IOR;
			 addr = uartController + 0x1028;
			 size = 4;
		}
		
		register UART1_SR {
			 type = IOR;
			 addr = uartController + 0x102c;
			 size = 4;
		}
		
		register UART1_FIFO {
			 type = IOR;
			 addr = uartController + 0x1030;
			 size = 4;
		}
		
		register UART1_BAUDDIV {
			 type = IOR;
			 addr = uartController + 0x1034;
			 size = 4;
		}
		
		register UART1_FLOWDELAY {
			 type = IOR;
			 addr = uartController + 0x1038;
			 size = 4;
		}
		
		register UART1_TX_FIFO_Level {
			 type = IOR;
			 addr = uartController + 0x1044;
			 size = 4;
		}
	}
	
	reginit {
		SLCR_UNLOCK = 0xdf0d;							# unlock SLCR
		SLCR_OCM_CFG = 0x10;							# map all OCM blocks to lower address
		SLCR_LOCK = 0x767b;								# lock SLCR
	}
	
}